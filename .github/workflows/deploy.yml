name: Deploy to Vercel

on:
  workflow_dispatch:
    inputs:
      runs:
        description: 'Number of times to invoke the deploy workflow'
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      iterations: ${{ steps.generate_matrix.outputs.iterations }}
    steps:
      - name: Generate Matrix
        id: generate_matrix
        run: |
          runs=${{ github.event.inputs.runs }}
          echo "Generating iterations for $runs runs."
          if ! [[ "$runs" =~ ^[0-9]+$ ]]; then
            echo "Error: 'runs' must be a positive integer."
            exit 1
          fi
          # Generate compact JSON array
          json=$(seq 1 "$runs" | jq -c -R . | jq -s -c .)
          echo "Generated JSON: $json"
          echo "iterations=$json" >> $GITHUB_OUTPUT
        env:
          runs: ${{ github.event.inputs.runs }}

  deploy_and_fetch:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        iteration: ${{ fromJson(needs.setup.outputs.iterations) }}
      max-parallel: 1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: deploy
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          PRODUCTION: false

      - name: Debug Deploy Outputs
        run: |
          echo "PREVIEW_URL: ${{ steps.deploy.outputs.PREVIEW_URL }}"

      - name: Fetch /api/config
        id: fetch_api_config
        run: |
          DEPLOYMENT_URL="${{ steps.deploy.outputs.PREVIEW_URL }}"
          echo "Fetching /api/config from $DEPLOYMENT_URL..."
          RESPONSE=$(curl -s "${DEPLOYMENT_URL}/api/config")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from /api/config."
            exit 1
          fi
          echo "API Response: $RESPONSE"
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
          echo "API_RESPONSE=${RESPONSE}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: |
          echo "DEPLOYMENT_URL: $DEPLOYMENT_URL"
          echo "API_RESPONSE: $API_RESPONSE"

      - name: Save Deployment Data
        run: |
          echo "{\"PREVIEW_URL\":\"${DEPLOYMENT_URL}\",\"API_RESPONSE\":\"${API_RESPONSE}\"}" > output_${{ matrix.iteration }}.json

      - name: Upload Deployment Data
        uses: actions/upload-artifact@v3
        with:
          name: deployment-data
          path: output_${{ matrix.iteration }}.json

  summary:
    needs: deploy_and_fetch
    runs-on: ubuntu-latest
    steps:
      - name: Download Deployment Data
        uses: actions/download-artifact@v3
        with:
          name: deployment-data
          path: ./deployment-data

      - name: Combine Deployment Summaries
        run: |
          echo "## Deployment Summary" > summary.md

          # Debug: Print iterations output
          echo "Iterations Output: ${{ needs.setup.outputs.iterations }}"

          # Parse the iterations JSON and get the count
          RUN_COUNT=$(echo "${{ needs.setup.outputs.iterations }}" | jq '. | length')
          
          # Debug: Print RUN_COUNT
          echo "RUN_COUNT: $RUN_COUNT"

          echo "Total Deployments: $RUN_COUNT" >> summary.md
          echo "" >> summary.md

          for i in $(seq 1 "$RUN_COUNT"); do
            FILE="./deployment-data/output_$i.json"
            if [ -f "$FILE" ]; then
              DEPLOYMENT_URL=$(jq -r '.PREVIEW_URL' "$FILE")
              API_RESPONSE=$(jq -r '.API_RESPONSE' "$FILE")
              echo "### Deployment #$i" >> summary.md
              echo "- **Deployment URL:** [${DEPLOYMENT_URL}](${DEPLOYMENT_URL})" >> summary.md
              echo "- **API Response:** \`${API_RESPONSE}\`" >> summary.md
              echo "" >> summary.md
            else
              echo "### Deployment #$i" >> summary.md
              echo "- **Deployment URL:** (No Data)" >> summary.md
              echo "- **API Response:** (No Data)" >> summary.md
              echo "" >> summary.md
            fi
          done

          echo "Generated Deployment Summary:"
          cat summary.md

      - name: Add Summary to GitHub Summary
        uses: actions/github-script@v6
        with:
          script: |
            const summary = require('fs').readFileSync('summary.md', 'utf8');
            core.summary.addRaw(summary).write();
