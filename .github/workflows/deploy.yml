name: Deploy to Vercel

on:
  workflow_dispatch:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy to Vercel
        id: vercel_deploy
        uses: BetaHuhn/deploy-to-vercel-action@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          PRODUCTION: false

      - name: Fetch /api/config
        if: ${{ steps.vercel_deploy.outputs.DEPLOYMENT_CREATED }} # Ensure deployment was created
        id: fetch_api_config
        run: |
          DEPLOYMENT_URL="${{ steps.vercel_deploy.outputs.PREVIEW_URL }}"
          echo "Fetching /api/config from $DEPLOYMENT_URL..."
          RESPONSE=$(curl -s "${DEPLOYMENT_URL}/api/config")
          if [ -z "$RESPONSE" ]; then
            echo "Error: No response from /api/config."
            exit 1
          fi
          echo "API Response: $RESPONSE"
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
          echo "API_RESPONSE=${RESPONSE}" >> $GITHUB_ENV

      - name: Add Deployment Summary
        if: ${{ steps.vercel_deploy.outputs.DEPLOYMENT_CREATED }} # Ensure deployment was created
        uses: actions/github-script@v6
        with:
          script: |
            const deploymentUrl = process.env.DEPLOYMENT_URL;
            const apiResponse = process.env.API_RESPONSE;
            const summaryContent = 
            ## Vercel Deployment Summary
            - **Deployment URL:** [Visit Deployment](${deploymentUrl})
            - **API Response from /api/config:** \${apiResponse}\
            ;
            core.summary.addRaw(summaryContent).write();
